version: '3.8'

services:
  # Main application service
  analysis:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rzonedevops-analysis
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # Neon
      - NEON_CONNECTION_STRING=${NEON_CONNECTION_STRING}
      - NEON_HOST=${NEON_HOST}
      - NEON_DATABASE=${NEON_DATABASE}
      - NEON_USER=${NEON_USER}
      - NEON_PASSWORD=${NEON_PASSWORD}
      
      # Connection pooling
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-20}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE:-3600}
      
      # Retry configuration
      - DB_MAX_RETRIES=${DB_MAX_RETRIES:-3}
      - DB_RETRY_DELAY=${DB_RETRY_DELAY:-1.0}
      - DB_RETRY_BACKOFF=${DB_RETRY_BACKOFF:-2.0}
      
      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.7}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-2000}
      
      # System
      - ENABLE_CACHING=${ENABLE_CACHING:-True}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - BATCH_SIZE=${BATCH_SIZE:-100}
    
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.cache:/app/.cache
    
    ports:
      - "${FLASK_PORT:-5000}:5000"
    
    networks:
      - analysis-network
    
    healthcheck:
      test: ["CMD", "python", "-c", "from src.config import get_config; config = get_config(); exit(0 if config.validate() else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # Redis cache (optional)
  redis:
    image: redis:7-alpine
    container_name: rzonedevops-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - analysis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  analysis-network:
    driver: bridge

volumes:
  redis-data:
    driver: local

