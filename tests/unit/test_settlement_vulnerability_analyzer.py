#!/usr/bin/env python3
"""
Test suite for Settlement Vulnerability Analyzer

Tests the functionality that demonstrates vulnerabilities in settlement agreements
where parties represent themselves and exploit vague terms to appoint their own
wellness center professionals for ongoing treatments as company expenses.
"""

import os
import sys
from datetime import datetime
from pathlib import Path

import pytest

# Add the tools directory to the Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "tools"))

from settlement_vulnerability_analyzer import (
    SelfRepresentationExploitation,
    SelfRepresentationTactic,
    SettlementVulnerability,
    SettlementVulnerabilityAnalyzer,
    VulnerabilityType,
    WellnessCenterAppointment,
)


class TestSettlementVulnerabilityAnalyzer:
    """Test suite for Settlement Vulnerability Analyzer"""

    def setup_method(self):
        """Set up test fixtures"""
        self.analyzer = SettlementVulnerabilityAnalyzer()
        self.test_case_id = "case_2025_137857"

    def test_analyzer_initialization(self):
        """Test that analyzer initializes correctly"""
        assert self.analyzer is not None
        assert hasattr(self.analyzer, "case_root_dir")
        assert isinstance(self.analyzer.case_root_dir, Path)

    def test_analyze_self_representation_exploitation(self):
        """Test comprehensive self-representation exploitation analysis"""
        exploitation = self.analyzer.analyze_self_representation_exploitation(
            self.test_case_id
        )

        assert isinstance(exploitation, SelfRepresentationExploitation)
        assert exploitation.case_id == self.test_case_id
        assert isinstance(exploitation.analysis_date, datetime)
        assert len(exploitation.parties_self_representing) > 0
        assert len(exploitation.tactics_used) > 0
        assert len(exploitation.wellness_appointments) > 0
        assert len(exploitation.vulnerabilities_exploited) > 0
        assert exploitation.total_financial_impact > 0
        assert len(exploitation.court_orders_obtained) > 0

    def test_self_representing_parties_identification(self):
        """Test identification of self-representing parties"""
        parties = self.analyzer._identify_self_representing_parties(self.test_case_id)

        assert isinstance(parties, list)
        assert len(parties) >= 2  # Should identify at least 2 parties
        assert all(isinstance(party, str) for party in parties)
        assert any("Self-Representing" in party for party in parties)

    def test_exploitation_tactics_analysis(self):
        """Test analysis of exploitation tactics"""
        parties = ["Party A", "Party B"]
        tactics = self.analyzer._analyze_exploitation_tactics(
            self.test_case_id, parties
        )

        assert isinstance(tactics, list)
        assert len(tactics) >= 3  # Should identify multiple tactics
        assert all(isinstance(tactic, SelfRepresentationTactic) for tactic in tactics)

        # Should include key exploitation tactics
        tactic_values = [tactic.value for tactic in tactics]
        assert "attorney_impersonation" in tactic_values
        assert "professional_appointment" in tactic_values
        assert "expense_manipulation" in tactic_values

    def test_wellness_center_appointments_identification(self):
        """Test identification of wellness center appointments"""
        parties = ["Party A", "Party B"]
        appointments = self.analyzer._identify_wellness_center_appointments(
            self.test_case_id, parties
        )

        assert isinstance(appointments, list)
        assert len(appointments) >= 2  # Should identify multiple appointments
        assert all(isinstance(apt, WellnessCenterAppointment) for apt in appointments)

        # Check appointment details
        for appointment in appointments:
            assert appointment.professional_name
            assert appointment.wellness_center_name
            assert appointment.appointment_party
            assert appointment.ownership_connection
            assert appointment.diagnosis_provided
            assert appointment.treatment_plan
            assert appointment.estimated_costs > 0
            assert appointment.duration_months > 0
            assert appointment.court_order_reference

    def test_work_related_stress_diagnosis(self):
        """Test that work-related stress diagnoses are properly identified"""
        parties = ["Party A", "Party B"]
        appointments = self.analyzer._identify_wellness_center_appointments(
            self.test_case_id, parties
        )

        # Should have diagnoses related to work stress
        diagnoses = [apt.diagnosis_provided for apt in appointments]
        stress_related = [
            diag
            for diag in diagnoses
            if "stress" in diag.lower() or "work" in diag.lower()
        ]

        assert len(stress_related) > 0, "Should identify work-related stress diagnoses"

        # Check that treatments are ongoing and expensive
        total_costs = sum(
            apt.estimated_costs * apt.duration_months for apt in appointments
        )
        assert total_costs > 100000, "Should demonstrate significant financial impact"

    def test_exploited_vulnerabilities_identification(self):
        """Test identification of exploited vulnerabilities"""
        appointments = [
            WellnessCenterAppointment(
                professional_name="Test Dr",
                wellness_center_name="Test Center",
                appointment_party="Party A",
                ownership_connection="Owner",
                diagnosis_provided="Work stress",
                treatment_plan="Ongoing therapy",
                estimated_costs=10000.0,
                duration_months=12,
                court_order_reference="Test Order",
            )
        ]

        vulnerabilities = self.analyzer._identify_exploited_vulnerabilities(
            self.test_case_id, appointments
        )

        assert isinstance(vulnerabilities, list)
        assert len(vulnerabilities) >= 4  # Should identify multiple vulnerabilities
        assert all(
            isinstance(vuln, SettlementVulnerability) for vuln in vulnerabilities
        )

        # Check vulnerability types
        vuln_types = [vuln.vulnerability_type for vuln in vulnerabilities]
        assert VulnerabilityType.VAGUE_TERMS in vuln_types
        assert VulnerabilityType.UNRESTRICTED_REFERENCES in vuln_types
        assert VulnerabilityType.PROFESSIONAL_SELECTION_CONTROL in vuln_types
        assert VulnerabilityType.EXPENSE_AUTHORIZATION in vuln_types

        # Check vulnerability details
        for vulnerability in vulnerabilities:
            assert vulnerability.description
            assert vulnerability.exploitation_method
            assert vulnerability.financial_impact > 0
            assert vulnerability.legal_basis
            assert vulnerability.mitigation_strategy

    def test_court_orders_identification(self):
        """Test identification of court orders enabling exploitation"""
        appointments = []  # Empty list for testing
        court_orders = self.analyzer._identify_court_orders(
            self.test_case_id, appointments
        )

        assert isinstance(court_orders, list)
        assert len(court_orders) >= 2  # Should identify multiple court orders
        assert all(isinstance(order, str) for order in court_orders)
        assert any("Settlement Agreement" in order for order in court_orders)
        assert any("Treatment Authorization" in order for order in court_orders)

    def test_financial_impact_calculation(self):
        """Test accurate financial impact calculation"""
        exploitation = self.analyzer.analyze_self_representation_exploitation(
            self.test_case_id
        )

        # Calculate expected total from appointments
        expected_total = sum(
            apt.estimated_costs * apt.duration_months
            for apt in exploitation.wellness_appointments
        )

        assert exploitation.total_financial_impact == expected_total
        assert exploitation.total_financial_impact > 0

        # Should demonstrate significant financial exploitation
        assert (
            exploitation.total_financial_impact > 500000
        ), "Should show substantial financial impact"

    def test_vulnerability_report_generation(self):
        """Test generation of comprehensive vulnerability report"""
        exploitation = self.analyzer.analyze_self_representation_exploitation(
            self.test_case_id
        )
        report = self.analyzer.generate_vulnerability_report(exploitation)

        assert isinstance(report, str)
        assert len(report) > 1000  # Should be comprehensive

        # Check for key report sections
        assert "SETTLEMENT AGREEMENT VULNERABILITY DEMONSTRATION REPORT" in report
        assert "EXECUTIVE SUMMARY" in report
        assert "SELF-REPRESENTATION EXPLOITATION ANALYSIS" in report
        assert "WELLNESS CENTER PROFESSIONAL APPOINTMENTS" in report
        assert "EXPLOITED VULNERABILITIES" in report
        assert "COURT ORDERS ENABLING EXPLOITATION" in report
        assert "VULNERABILITY DEMONSTRATION SCENARIOS" in report
        assert "CRITICAL VULNERABILITY FINDINGS" in report
        assert "RECOMMENDED MITIGATION STRATEGIES" in report

        # Check for key content elements
        assert "work-related stress" in report.lower()
        assert "company expenses" in report.lower()
        assert "court order" in report.lower()
        assert "wellness center" in report.lower()
        assert "vague definitions" in report.lower()
        assert "unrestricted terms" in report.lower()

    def test_vulnerability_scenarios_demonstration(self):
        """Test that vulnerability scenarios are properly demonstrated"""
        exploitation = self.analyzer.analyze_self_representation_exploitation(
            self.test_case_id
        )
        report = self.analyzer.generate_vulnerability_report(exploitation)

        # Should include scenario demonstrations
        assert "Scenario 1: Work-Related Stress Diagnosis Chain" in report
        assert "Scenario 2: Unrestricted Professional Service Authorization" in report
        assert "Scenario 3: Conflict of Interest Exploitation" in report

        # Should show the exploitation chain
        assert "Party self-represents" in report
        assert "Appoint professionals" in report or "appoint professionals" in report
        assert "work-related stress" in report.lower()
        assert "company payment" in report or "company funding" in report
        assert "court order enforces" in report or "Court order enforces" in report

    def test_mitigation_strategies_provision(self):
        """Test that comprehensive mitigation strategies are provided"""
        exploitation = self.analyzer.analyze_self_representation_exploitation(
            self.test_case_id
        )
        report = self.analyzer.generate_vulnerability_report(exploitation)

        # Should include mitigation strategies
        assert "RECOMMENDED MITIGATION STRATEGIES" in report
        assert "Specific Professional Service Definitions" in report
        assert "Independent Professional Selection" in report
        assert "Cost Controls and Limitations" in report
        assert "Treatment Review and Termination Conditions" in report
        assert "Conflict of Interest Screening" in report

        # Check for specific mitigation recommendations
        assert "competitive bidding" in report.lower()
        assert "independent review" in report.lower()
        assert "conflict of interest" in report.lower()
        assert "cost caps" in report.lower()

    def test_analysis_persistence(self):
        """Test saving and loading of vulnerability analysis"""
        exploitation = self.analyzer.analyze_self_representation_exploitation(
            self.test_case_id
        )

        # Save analysis
        json_path = self.analyzer.save_analysis(exploitation, "/tmp")

        assert os.path.exists(json_path)

        # Check file contents
        import json

        with open(json_path, "r") as f:
            data = json.load(f)

        assert data["case_id"] == self.test_case_id
        assert "parties_self_representing" in data
        assert "wellness_appointments" in data
        assert "vulnerabilities_exploited" in data
        assert "total_financial_impact" in data

        # Clean up
        os.remove(json_path)

    def test_company_expense_exploitation_demonstration(self):
        """Test demonstration of company expense exploitation under court order"""
        exploitation = self.analyzer.analyze_self_representation_exploitation(
            self.test_case_id
        )

        # Should show how company expenses are exploited
        assert len(exploitation.wellness_appointments) > 0

        for appointment in exploitation.wellness_appointments:
            # Should demonstrate ownership connections that create conflicts
            assert (
                "ownership" in appointment.ownership_connection.lower()
                or "partner" in appointment.ownership_connection.lower()
                or "shareholder" in appointment.ownership_connection.lower()
            )

            # Should show ongoing treatments as company expenses
            assert appointment.estimated_costs > 5000  # Significant monthly costs
            assert appointment.duration_months >= 12  # Long-term treatments

        # Should have court orders authorizing payments
        assert len(exploitation.court_orders_obtained) > 0
        court_order_text = " ".join(exploitation.court_orders_obtained).lower()
        assert "payment" in court_order_text or "authorize" in court_order_text

    @pytest.mark.integration
    def test_full_vulnerability_demonstration_integration(self):
        """Integration test for complete vulnerability demonstration"""
        exploitation = self.analyzer.analyze_self_representation_exploitation(
            self.test_case_id
        )

        # Complete exploitation analysis should demonstrate the full chain:
        # 1. Self-representation
        assert len(exploitation.parties_self_representing) >= 2

        # 2. Professional appointment tactics
        assert (
            SelfRepresentationTactic.PROFESSIONAL_APPOINTMENT
            in exploitation.tactics_used
        )

        # 3. Wellness center ownership connections
        ownership_connections = [
            apt.ownership_connection for apt in exploitation.wellness_appointments
        ]
        assert any("ownership" in conn.lower() for conn in ownership_connections)

        # 4. Work-related stress diagnoses
        diagnoses = [
            apt.diagnosis_provided for apt in exploitation.wellness_appointments
        ]
        assert any("stress" in diag.lower() for diag in diagnoses)

        # 5. Ongoing treatments as company expenses
        assert exploitation.total_financial_impact > 500000

        # 6. Court order authorization
        assert len(exploitation.court_orders_obtained) >= 2

        # 7. Multiple vulnerabilities exploited
        assert len(exploitation.vulnerabilities_exploited) >= 4

        # Generate comprehensive report
        report = self.analyzer.generate_vulnerability_report(exploitation)
        assert len(report) > 10000  # Should be very comprehensive

        # Verify all key vulnerability elements are demonstrated
        report_lower = report.lower()
        vulnerability_keywords = [
            "vague definitions",
            "unrestricted terms",
            "self-representing",
            "wellness center",
            "work-related stress",
            "company expenses",
            "court order",
            "ongoing treatments",
            "professional appointment",
            "conflict of interest",
        ]

        for keyword in vulnerability_keywords:
            assert keyword in report_lower, f"Report should contain '{keyword}'"


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
